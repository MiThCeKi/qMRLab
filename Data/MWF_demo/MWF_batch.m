<<<<<<< HEAD
%Place in the right folder to run
cdmfile('MWF_batch.m');

warning('off','all');
=======
% Command Line Interface (CLI) is well-suited for automatization 
% purposes and Octave. 
>>>>>>> 2ee6d2dbaf24f87e1f346d1412f3361c6f9206e2

% Please execute this m-file section by section to get familiar with batch
% processing for MWF on CLI.

% This m-file has been automatically generated by qMRgenBatch function. 

<<<<<<< HEAD
%% Load dataset
% Load your parameters to create your Model
% load('MWFPamameters.mat');
Model = MWF;

%% Check data and fitting (Optional)

%**************************************************************************
% I- GENERATE FILE STRUCT
%**************************************************************************
% Create a struct "file" that contains the NAME of all data's FILES
% file.DATA = 'DATA_FILE';
file = struct;
file.MET2data = 'MET2data.mat';
file.Mask = 'Mask.mat';

%**************************************************************************
% II- CHECK DATA AND FITTING
%**************************************************************************
qMRLab(Model,file);


%% Create Quantitative Maps

%**************************************************************************
% I- LOAD PROTOCOL
%**************************************************************************

% Echo (time in millisec)
EchoTimes = [10; 20; 30; 40; 50; 60; 70; 80; 90; 100; 110; 120; 130; 140; 150; 160; 170;
            180; 190; 200; 210; 220; 230; 240; 250; 260; 270; 280; 290; 300; 310; 320];
Model.Prot.MET2data.Mat = EchoTimes;

% Update the model
Model = Model.UpdateFields;

%**************************************************************************
% II- LOAD EXPERIMENTAL DATA
%**************************************************************************
% Create a struct "data" that contains all the data
% .MAT file : load('DATA_FILE');
%             data.DATA = double(DATA);
% .NII file : data.DATA = double(load_nii_data('DATA_FILE'));
data = struct;
load('MET2data.mat');
data.MET2data = double(MET2data);
load('Mask.mat');
data.Mask     = double(Mask);

%**************************************************************************
% III- FIT DATASET
%**************************************************************************
% All voxels
FitResults       = FitData(data,Model,1); % 3rd argument plots a waitbar
delete('FitTempResults.mat');

%**************************************************************************
% IV- CHECK FITTING RESULT IN A VOXEL
%**************************************************************************
figure
voxel           = [37, 40, 1];
FitResultsVox   = extractvoxel(FitResults,voxel,FitResults.fields);
dataVox         = extractvoxel(data,voxel);
Model.plotModel(FitResultsVox,dataVox)

%**************************************************************************
% V- SAVE
%**************************************************************************
% .MAT file : FitResultsSave_mat(FitResults,folder);
% .NII file : FitResultsSave_nii(FitResults,fname_copyheader,folder);
FitResultsSave_mat(FitResults);
save('MWFPamameters.mat','Model');

%% Check the results
% Load them in qMRLab
=======
% This script has been manually modified for MoxUnit.

% Written by: Agah Karakuzu, 2017
% =========================================================================

%% AUXILIARY SECTION - (OPTIONAL) -----------------------------------------
% -------------------------------------------------------------------------

qMRinfo('MWF'); % Display help 
[pathstr,fname,ext]=fileparts(which('MWF_batch.m'));
cd (pathstr);

%% STEP|CREATE MODEL OBJECT -----------------------------------------------
%  (1) |- This section is a one-liner.
% -------------------------------------------------------------------------

Model = MWF; % Create model object

%% STEP |CHECK DATA AND FITTING - (OPTIONAL) ------------------------------
%  (2)	|- This section will pop-up the options GUI. (MATLAB Only)
%		|- Octave is not GUI compatible. 
% -------------------------------------------------------------------------

if not(moxunit_util_platform_is_octave) % ---> If MATLAB
Custom_OptionsGUI(Model);
Model = getappdata(0,'Model');
end



%% STEP |LOAD PROTOCOL ----------------------------------------------------
%  (3)	|- Respective command lines appear if required by MWF. 
% -------------------------------------------------------------------------

% MWF object needs 1 protocol field(s) to be assigned:
 

% MET2data
% --------------
% EchoTime (ms) is a vector of [32X1]
EchoTime  = [10.0000; 20.0000; 30.0000; 40.0000; 50.0000; 60.0000; 70.0000; 80.0000; 90.0000; 100.0000; 110.0000; 120.0000; 130.0000; 140.0000; 150.0000; 160.0000; 170.0000; 180.0000; 190.0000; 200.0000; 210.0000; 220.0000; 230.0000; 240.0000; 250.0000; 260.0000; 270.0000; 280.0000; 290.0000; 300.0000; 310.0000; 320.0000];
Model.Prot.MET2data.Mat = [ EchoTime ];
% -----------------------------------------



%% STEP |LOAD EXPERIMENTAL DATA -------------------------------------------
%  (4)	|- Respective command lines appear if required by MWF. 
% -------------------------------------------------------------------------
% MWF object needs 2 data input(s) to be assigned:
 

% MET2data
% Mask
% --------------

data = struct();
 
% MET2data.mat contains [64  64   1  32] data.
 load('MET2data.mat');
% Mask.mat contains [64  64] data.
 load('Mask.mat');
 data.MET2data= double(MET2data);
 data.Mask= double(Mask);

%% STEP |FIT DATASET ------------------------------------------------------
%  (5)  |- This section will fit data. 
% -------------------------------------------------------------------------

FitResults = FitData(data,Model,0);

FitResults.Model = Model; % qMRLab output.

%% STEP |CHECK FITTING RESULT IN A VOXEL - (OPTIONAL) ---------------------
%   (6)	|- To observe outputs, please execute the lines in this section.
% -------------------------------------------------------------------------


% outputIm = FitResults.(FitResults.fields{1});

% row = round(size(outputIm,1)/2);
% col = round(size(outputIm,2)/2);
% voxel           = [row, col, 1]; % Please adapt 3rd index if 3D. 

% Show plot.  ---> 
% figure();
% FitResultsVox   = extractvoxel(FitResults,voxel,FitResults.fields);
% dataVox         = extractvoxel(data,voxel);
% Model.plotModel(FitResultsVox,dataVox)

% Show image itself. ---> 
% figure();
% imagesc(outputIm); colorbar(); title(FitResults.fields{1});


%% STEP |SAVE -------------------------------------------------------------
%  	(7) |- Save your outputs. 
% -------------------------------------------------------------------------

if moxunit_util_platform_is_octave % ---> If Octave 

save -mat7-binary 'MWF_FitResultsOctave.mat' 'FitResults';

else % ---> If MATLAB 

qMRsaveModel(Model,'MWF.qMRLab.mat'); 

end

% You can save outputs in Nifti format using FirResultSave_nii function:
% Plase see qMRinfo('FitResultsSave_nii')




>>>>>>> 2ee6d2dbaf24f87e1f346d1412f3361c6f9206e2
